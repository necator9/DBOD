
    /*
    size_t R1 = 4;
    size_t C1 = 4; 
    int mat1[R1][C1] = {
        {1, 1, 1, 1},
        {2, 2, 2, 2},
        {3, 3, 3, 3},
        {4, 4, 4, 4}
    };

    int a[5][10] = { { } };
    process_2d_array_template(mat1);



    
    

    int mat1[R1][C1] = {
            {1, 1, 1, 1},
            {2, 2, 2, 2},
            {3, 3, 3, 3},
            {4, 4, 4, 4}
    };
 
    int mat2[R2][C2] = {
            {1, 1, 1, 1},
            {2, 2, 2, 2},
            {3, 3, 3, 3},
            {4, 4, 4, 4}
    };

*/


 //   cap.release();

    std::vector<cv::Point> contour = {cv::Point(587, 476), cv::Point(584, 479), cv::Point(590, 479)};  
    std::vector<std::vector<cv::Point> > contours = {contour}; 

    for(auto rit = std::rbegin(contours); rit != std::rend(contours); ++rit) {
        std::cout << *rit << "\n";
    std::cout << "\n\n";
    }



/*

    for(size_t i = 0; i < contours.size(); i++){
        std::cout << boundRect[i] << c_a[i] << std::endl;
    }
    for(auto &v : distance){
        v = v + 1;
        std::cout << v << "\n";
    }
void mulMat(int mat1[][], int mat2[][], int R1, int R2, int C1, int C2)  {
    int rslt[R1][C2];
 
    std::cout << "Multiplication of given two matrices is:\n" << std::endl;
 
    for (int i = 0; i < R1; i++) {
        for (int j = 0; j < C2; j++) {
            rslt[i][j] = 0;
            for (int k = 0; k < R2; k++) {
                rslt[i][j] += mat1[i][k] * mat2[k][j];
            }
 
            std::cout << rslt[i][j] << "\t";
        }
 
        std::cout << std::endl;
    }
}

void ProcessRef(const std::array<int, 5>& arr) {
 for(auto v : arr)
  std::cout << v << "\n";

template<typename _Ret, typename T_d>
_Ret Sum(const T_d& c) {

 _Ret sum = 0;
 for(auto& v : c)
    sum += v;
 return sum;
}
*/


template <size_t rows, size_t cols>
void process_2d_array_template(int (&array)[rows][cols])
{
    std::cout << __func__ << std::endl;
    for (size_t i = 0; i < rows; ++i)
    {
        std::cout << i << ": ";
        for (size_t j = 0; j < cols; ++j)
            std::cout << array[i][j] << '\t';
        std::cout << std::endl;
    }
}



    // cv::String img_name;
    // const cv::String dir_path = "/home/ivan/out_img/";
    //     img_name = dir_path + std::to_string(i) + ".jpg";
    //     cv::imwrite(img_name, fg_frame);
    //     std::cout << img_name << " written" << std::endl;
    // }


    std::vector<std::vector<int>> px_y_bottom_top;
    std::vector<std::vector<double>> y_bottom_top_to_hor;
    int px_y_bottom_top_p1, px_y_bottom_top_p2;
    for(size_t i = 0; i < contours.size(); i++){
        px_y_bottom_top_p1 = img_res.height - boundRect[i].br().y;
        px_y_bottom_top_p2 = img_res.height - boundRect[i].y;
        px_y_bottom_top.push_back(std::vector<int> {px_y_bottom_top_p1, px_y_bottom_top_p2});
        // Distances from vertices to img center (horizon) along y axis, in px
        y_bottom_top_to_hor.push_back(std::vector<double> {cx_cy.y - px_y_bottom_top_p1, cx_cy.y - px_y_bottom_top_p2});  
        //Convert to mm and find angle between object pixel and central image pixel along y axis
        y_bottom_top_to_hor[i][0] = atan(y_bottom_top_to_hor[i][0] * px_h_mm); 
        y_bottom_top_to_hor[i][1] = atan(y_bottom_top_to_hor[i][1] * px_h_mm); 
    }




   
    // std::cout << format(y_bottom_top_to_hor, cv::Formatter::FMT_NUMPY) << std::endl << std::endl;

    //std::cout << format(px_y_bottom_top, cv::Formatter::FMT_NUMPY) << std::endl << std::endl;
    // Find object height in real world
    std::vector<double> rw_height(contours.size());
    estimate_height(rw_height, rw_distance, y_bottom_top_to_hor);
    


    
    //         # * Transform bounding rectangles to required shape
        // # Build a single array from left and right rects' coords to compute within single vectorized transformation
  //  std::vector<double> px_x_l(contours.size()), px_x_r(contours.size());  // Left and right rectangle coordinates along x-axis
    cv::Mat px_x_l = cv::Mat_<int>::ones(contours.size(), 3);
    // Iterate over all pixels of the image
    for(int r = 0; r < px_x_l.rows; r++){
        int* ptr = px_x_l.ptr<int>(r);  // Obtain a pointer to the beginning of row r
        ptr[0] = boundRect[r].x;        // Left bottom coord
        ptr[1] = px_y_bottom_top[r][0];
        ptr[2] = 1;                     // To hom. coordinates
       // std::cout << px_x_l.at<int>(r, 0) << "  " << px_x_l.at<int>(r, 1) << "  " << px_x_l.at<int>(r, 2) << std::endl;
    }

    cv::Mat px_x_r = cv::Mat_<int>::ones(contours.size(), 3);
    for(int r = 0; r < px_x_r.rows; r++){
        int* ptr = px_x_r.ptr<int>(r);    // Obtain a pointer to the beginning of row r
        ptr[0] = boundRect[r].br().x;     // Right bottom coord
        ptr[1] = px_y_bottom_top[r][0];
        ptr[2] = 1;
       // std::cout << px_x_r.at<int>(r, 0) << "  " << px_x_r.at<int>(r, 1) << "  " << px_x_r.at<int>(r, 2) << std::endl;
    }



    // Z cam is a scaling factor which is needed for 3D reconstruction
    std::vector<double> z_cam_coords(contours.size());
    for(auto r = 0; r < z_cam_coords.size(); r++){
        z_cam_coords[r] = cam_h * sin(rx_rad) + rw_distance[r] * cos(rx_rad);
        //std::cout << rw_distance[r] << std::endl;
    }

    cv::Mat cam_xl_yb_h = cv::Mat_<double>(contours.size(), 3);
    for(int r = 0; r < cam_xl_yb_h.rows; r++){
        double* ptr_cam_xl_yb_h = cam_xl_yb_h.ptr<double>(r);
        int* ptr_px_x_l = px_x_l.ptr<int>(r);
        for(int c = 0; c < cam_xl_yb_h.cols; c++){
            ptr_cam_xl_yb_h[c] = ptr_px_x_l[c] * z_cam_coords[r];
            // std::cout << ptr_cam_xl_yb_h[c] << std::endl;
        }
    }

    cv::Mat cam_xr_yb_h = cv::Mat_<double>(contours.size(), 3);
    for(int r = 0; r < cam_xr_yb_h.rows; r++){
        double* ptr_cam_xr_yb_h = cam_xr_yb_h.ptr<double>(r);
        int* ptr_px_x_r = px_x_r.ptr<int>(r);
        for(int c = 0; c < cam_xr_yb_h.cols; c++){
            ptr_cam_xr_yb_h[c] = ptr_px_x_r[c] * z_cam_coords[r];
            // std::cout << ptr_cam_xr_yb_h[c] << std::endl;
        }
    }

    cv::Mat camera_coords_l = intrinsic_inv * cam_xl_yb_h.t();
    cv::Mat camera_coords_r = intrinsic_inv * cam_xr_yb_h.t();

    
    // cv::Mat camera_coords_lh = cv::Mat_<double>(4, 4);
    // cv::Mat camera_coords_rh = cv::Mat_<double>(4, 4);

    // cv::convertPointsToHomogeneous(camera_coords_l, camera_coords_lh);
    // cv::convertPointsToHomogeneous(camera_coords_r, camera_coords_rh);

    cv::Mat h_row = cv::Mat_<double>::ones(1, camera_coords_l.cols); 
    camera_coords_l.push_back(h_row);  
    camera_coords_r.push_back(h_row); 

    cv::Mat rw_coords_l = (rot_x_mtx_inv * camera_coords_l).t();
    cv::Mat rw_coords_r = (rot_x_mtx_inv * camera_coords_r).t();

    // std::cout << format(rw_coords_l, cv::Formatter::FMT_NUMPY ) << std::endl << std::endl;
    // std::


     //


    //**************************************************
    // Find object width in real world
    cv::Mat rw_width = cv::abs(rw_coords_l.col(0) - rw_coords_r.col(0));
    //  Find contour area in real world
    //cv::Mat rw_rect_a = rw_width.col(0);

        // # *
        // rw_rect_a = rw_width * rw_height
        // px_rect_a = b_rect[:, 2] * b_rect[:, 3]
        // rw_ca = ca_px * rw_rect_a / px_rect_a



C:\Users\Ivan\Repositories\capturing_c\build>"C:\Users\Ivan\Repositories\capturing_c\build\main.exe"
Time difference = 1080[ms]

C:\Users\Ivan\Repositories\capturing_c\build>"C:\Users\Ivan\Repositories\capturing_c\build\main.exe"
Time difference = 1173[ms]


C:\Users\Ivan\Repositories\capturing_c\build>"C:\Users\Ivan\Repositories\capturing_c\build\main.exe"
Time difference = 1089[ms]

C:\Users\Ivan\Repositories\capturing_c\build>"C:\Users\Ivan\Repositories\capturing_c\build\main.exe"
Time difference = 1087[ms]

C:\Users\Ivan\Repositories\capturing_c\build>"C:\Users\Ivan\Repositories\capturing_c\build\main.exe"
Time difference = 1080[ms]


    std::vector<double> intrinsic_v = {602.17434328, 0, 511.32476428,
                                       0.0, 601.27444228, 334.8572872,
                                       0, 0, 1};
    cv::Mat intrinsic = cv::Mat_<double>(3, 3, intrinsic_v.data());